(define (expmod base exp m)
  (define (square n)
    (* n n))
  (cond ((= exp 0) 1)
        ((even? exp)
         (remainder (square (expmod base (/ exp 2) m))
                    m))
        (else
         (remainder (* base (expmod base (- exp 1) m))
                    m))))

(define (fool-fermat-test n)
  (define (aux-test a)
    (cond ((= a 1) true)
          ((not (= (expmod a n n) a)) false)
          (else (aux-test (- a 1))))
    )
  (aux-test (- n 1)))

(fool-fermat-test 561)
(fool-fermat-test 1105)
(fool-fermat-test 1729)
(fool-fermat-test 2465)
(fool-fermat-test 2821)
(fool-fermat-test 6601)
