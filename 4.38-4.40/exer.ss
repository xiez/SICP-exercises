(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items)) true)
        ((member (car items) (cdr items)) false)
        (else (distinct? (cdr items)))))

;;; exer 4.38
(define (multiple-dwelling)
  (let((baker (amb12345))(cooper(amb12345))
       (fletcher (amb 1 2 3 4 5)) (miller (amb 1 2 3 4 5))
       (smith    (amb 1 2 3 4 5)))
    (require
     (distinct? (list baker cooper fletcher miller smith)))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    (require (> miller cooper))
    ;; (require (not (= (abs (- smith fletcher)) 1)))
    (require (not (= (abs (- fletcher cooper)) 1)))
    (list (list 'baker baker) (list 'cooper cooper)
          (list 'fletcher fletcher) (list 'miller miller)
          (list 'smith smith))))

;;; exer 4.39
;; the order does not affect the answer, but it does affect the time to find the answer.
;; a faster program:

(define (multiple-dwelling)
  (let((baker (amb 1 2 3 4 5)) (cooper(amb 1 2 3 4 5))
       (fletcher (amb 1 2 3 4 5)) (miller (amb 1 2 3 4 5))
       (smith    (amb 1 2 3 4 5)))
    (require
     (distinct? (list baker cooper fletcher miller smith)))
    (require (not (= baker 5)))
    (require (not (= cooper 1)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    (require (not (= (abs (- fletcher cooper)) 1)))
    (require (> miller cooper))
    (require (not (= (abs (- smith fletcher)) 1)))
    (list (list 'baker baker) (list 'cooper cooper)
          (list 'fletcher fletcher) (list 'miller miller)
          (list 'smith smith))))


;;; exer 4.40
(define (multiple-dwelling)
  (let ((fletcher (amb 1 2 3 4 5)))
    (require (not (= fletcher 5)))
    (require (not (= fletcher 1)))
    (let ((cooper (amb 1 2 3 4 5)))
      (require (not (= cooper 1)))
      (require (not (= (abs (- fletcher cooper)) 1)))
      (require distinct? (list fletcher cooper))
      (let ((smith    (amb 1 2 3 4 5)))
        (require (not (= (abs (- smith fletcher)) 1)))
        (require distinct? (list fletcher cooper smith))
        (let ((miller (amb 1 2 3 4 5)))
          (require (> miller cooper))
          (require distinct? (list fletcher cooper smith miller))
          (let ((baker (amb 1 2 3 4 5)))
            (require (not (= baker 5)))
            (require distinct? (list fletcher cooper smith miller))
            (list (list 'baker baker) (list 'cooper cooper)
                  (list 'fletcher fletcher) (list 'miller miller)
                  (list 'smith smith))))))))
